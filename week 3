#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

void insertAtHead(struct node** head_ref, int new_data) {
    struct node* new_node = (struct node*) malloc(sizeof(struct node));
    new_node->data = new_data;
    new_node->next = (*head_ref);
    (*head_ref) = new_node;
}

void insertAtTail(struct node** head_ref, int new_data) {
    struct node* new_node = (struct node*) malloc(sizeof(struct node));
    struct node* last = *head_ref;
    new_node->data = new_data;
    new_node->next = NULL;

    if(*head_ref == NULL) {
        *head_ref = new_node;
        return;
    }

    while(last->next != NULL) last = last->next;
    last->next = new_node;
}

void insertAtPosition(struct node** head_ref, int position, int new_data) {
    struct node* new_node = (struct node*) malloc(sizeof(struct node));
    new_node->data = new_data;

    if(position == 0) {
        new_node->next = *head_ref;
        *head_ref = new_node;
        return;
    }

    struct node* temp = *head_ref;
    for(int i=0; temp!=NULL && i<position-1; i++) temp = temp->next;

    if(temp == NULL || temp->next == NULL) return;

    new_node->next = temp->next;
    temp->next = new_node;
}

void deleteNode(struct node **head_ref, int key)
{
   struct node* temp = *head_ref, *prev;

   if (temp != NULL && temp->data == key)
   {
       *head_ref = temp->next;  
       free(temp);               
       return;
   }

   while (temp != NULL && temp->data != key)
   {
       prev = temp;
       temp = temp->next;
   }

   if (temp == NULL) return;

   prev->next = temp->next;

   free(temp);  
}

void printList(struct node* node) {
    while(node != NULL){
        printf("%d ", node->data);
        node = node->next;
    }
}




int main() {
    struct node* head = NULL;

    int n, data, option, position;

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    printf("Enter nodes:\n");
    
    for(int i=0; i<n; i++) {
        scanf("%d", &data);
        insertAtTail(&head, data);
    }

    printf("Choose an option:\n1. Insert at head\n2. Insert at tail\n3. Insert at position\n4. Delete a node\n");
    
    scanf("%d", &option);

    printf("Enter data: ");
    
    scanf("%d", &data);

    switch(option) {
        case 1:
            insertAtHead(&head, data);
            break;
        case 2:
            insertAtTail(&head, data);
            break;
        case 3:
            printf("Enter position: ");
            scanf("%d", &position);
            insertAtPosition(&head, position, data);
            break;
        case 4:
            deleteNode(&head, data);
            break;
        default:
            printf("Invalid option!\n");
            return -1;
    }

   printf("Linked List: ");
   printList(head);

   

   return 0;  
}
